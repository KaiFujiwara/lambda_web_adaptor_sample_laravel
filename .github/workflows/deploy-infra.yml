name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'cdk/**'
  # 手動実行を追加
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
          mask-aws-account-id: false

      # AWSアカウントIDを環境変数として設定
      - name: Set AWS Account ID
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install CDK dependencies
        run: |
          cd cdk
          rm -rf node_modules package-lock.json
          npm install

      - name: Bootstrap CDK
        env:
          CDK_DEFAULT_ACCOUNT: ${{ env.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ap-northeast-1
        run: |
          cd cdk
          # より詳細なブートストラップオプションを指定
          npx cdk bootstrap \
            aws://${{ env.AWS_ACCOUNT_ID }}/ap-northeast-1 \
            --force \
            --verbose \
            --show-template \
            --cloudformation-execution-policies 'arn:aws:iam::aws:policy/AdministratorAccess' \
            --template bootstrap-template.yaml

          # ブートストラップテンプレートの内容を確認
          cat bootstrap-template.yaml || true

      # S3バケットの作成を確認
      - name: Ensure S3 Bucket Exists
        run: |
          BUCKET_NAME="cdk-hnb659fds-assets-${{ env.AWS_ACCOUNT_ID }}-ap-northeast-1"
          
          # バケットが存在しない場合は作成
          if ! aws s3 ls "s3://${BUCKET_NAME}" 2>&1 > /dev/null; then
            aws s3 mb "s3://${BUCKET_NAME}" --region ap-northeast-1
            
            # バケットポリシーを設定
            cat > bucket-policy.json << EOF
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:root"
                  },
                  "Action": [
                    "s3:GetObject*",
                    "s3:PutObject*",
                    "s3:List*"
                  ],
                  "Resource": [
                    "arn:aws:s3:::${BUCKET_NAME}",
                    "arn:aws:s3:::${BUCKET_NAME}/*"
                  ]
                }
              ]
            }
            EOF
            
            aws s3api put-bucket-policy --bucket ${BUCKET_NAME} --policy file://bucket-policy.json
          fi

          # バケットの存在を確認
          aws s3 ls "s3://${BUCKET_NAME}"

      # ブートストラップの確認
      - name: Verify Bootstrap
        run: |
          # ブートストラップバケットの存在確認
          aws s3 ls s3://cdk-hnb659fds-assets-${{ env.AWS_ACCOUNT_ID }}-ap-northeast-1 || true
          
          # CloudFormationスタックの確認
          aws cloudformation describe-stacks \
            --stack-name CDKToolkit \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text

      # IAM権限の確認
      - name: Check IAM permissions
        run: |
          aws iam get-user
          aws sts get-caller-identity

      - name: Check CDK Bootstrap
        run: |
          cd cdk
          # CDKブートストラップスタックの状態を確認
          aws cloudformation describe-stacks --stack-name CDKToolkit || true

      - name: Check Stack Status
        run: |
          cd cdk
          # アプリケーションスタックの状態を確認
          aws cloudformation describe-stacks --stack-name LambdaLaravelStack || true
          # スタックのイベントを確認
          aws cloudformation describe-stack-events --stack-name LambdaLaravelStack || true

      - name: Verify S3 Permissions
        run: |
          # S3バケットの一覧表示
          aws s3 ls
          # CDKアセットバケットの確認
          aws s3 ls s3://cdk-${{ env.AWS_ACCOUNT_ID }}-assets || true

      - name: Verify IAM Permissions
        run: |
          # 必要なIAM権限の確認
          aws iam simulate-principal-policy \
            --policy-source-arn $(aws sts get-caller-identity --query 'Arn' --output text) \
            --action-names \
              s3:PutObject \
              s3:GetObject \
              s3:ListBucket \
              cloudformation:*

      - name: Deploy with CDK
        env:
          CDK_DEBUG: true
          CDK_DEFAULT_ACCOUNT: ${{ env.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ap-northeast-1
          CDK_STACK_NAME: ${{ github.event.inputs.environment == 'production' && 'LambdaLaravelStack-Prod' || 'LambdaLaravelStack' }}
          DEBUG: 'aws-cdk:*'
          AWS_VERBOSE_ERROR: true
          # アセットパブリッシングの詳細ログを有効化
          CDK_ASSET_VERBOSE: true
        run: |
          cd cdk
          # アセットの事前合成
          npx cdk synth
          # デプロイの実行（アセットの公開を含む）
          npx cdk deploy \
            --all \
            --require-approval never \
            --verbose \
            --trace \
            --debug \
            --asset-parallelism 1